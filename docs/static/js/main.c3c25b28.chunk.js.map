{"version":3,"sources":["components/Loading.js","components/Error.js","components/Answer.js","components/Question.js","data/categories.js","components/QuizConfig.js","components/Summary.js","views/App.js","reportWebVitals.js","index.js"],"names":["Loading","className","role","Error","props","onClick","reset","Answer","id","index","type","name","checked","selectedAnswer","answer","answered","disabled","onChange","setSelectedAnswer","correct_answer","htmlFor","Question","console","log","question","class","position","category","difficulty","all_answers","map","setPosition","setAnswered","validateAnswer","categories","QuizConfig","min","max","value","queryParams","num","e","setQueryParams","Math","floor","target","dif","cat","setStatus","STATUS","LOADING","Summary","score","points","correct_answers","length","aria-label","retakeQuiz","START","SUCCESS","FAIL","DONE","readQuestions","url","a","fetch","response","json","questions","decode","txt","DOMParser","parseFromString","body","innerText","App","useState","status","setQuestions","setScore","useEffect","URL","assembleURL","then","data","results","result","i","j","k","allAnswers","incorrect_answers","push","random","processAnswers","catch","error","answers","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3c25b28.chunk.js","sourcesContent":["import '../styles/loading.css'\r\n\r\nconst Loading = () => \r\n    <div className=\"card card-body loading\">\r\n        <div className=\"spinner-border text-info loading-spinner\" role=\"status\"/>\r\n        <h3 className=\"card-title loading-text\">Fetching quiz...</h3>\r\n        {/* <p className=\"loading-text\">Gathering parameters...</p> */}\r\n        {/* {\r\n            setTimeout(function(){\r\n                document.getElementsByClassName('loading-text')[0].innerHTML = \"Fetching quiz...\";\r\n            },5000)\r\n        }\r\n        {\r\n            setTimeout(function(){\r\n                document.getElementsByClassName('loading-text')[0].innerHTML = \"Shuffling questions...\";\r\n            },10000)\r\n        }\r\n        {\r\n            setTimeout(function(){\r\n                document.getElementsByClassName('loading-text')[0].innerHTML = \"Stowing tray tables...\";\r\n            },15000)\r\n        }\r\n        {\r\n            setTimeout(function(){\r\n                document.getElementsByClassName('loading-text')[0].innerHTML = \"Igniting engines...\";\r\n            },20000)\r\n        } */}\r\n        {/* {\r\n            setTimeout(function(){\r\n                document.getElementsByClassName('loading-text')[0].innerHTML = \"Taxying runway...\";\r\n            },25000)\r\n        } */}\r\n    </div>\r\n\r\nexport default Loading;","const Error = props => \r\n    <div className=\"card card-body api-error\">\r\n        <h3 className=\"card-title\">Something went wrong while contacting the server. Please try again.</h3>\r\n        <button className=\"btn btn-dark\" onClick={() => props.reset()}>Try Again</button>\r\n    </div>\r\n\r\nexport default Error;","const Answer = props =>\r\n    <>\r\n        <input className={`btn-check`} \r\n            id={`Answer${props.index}`} type=\"radio\" name=\"answers\"\r\n            checked={props.selectedAnswer === props.answer && !props.answered}\r\n            disabled={props.answered}\r\n            onChange={() => props.setSelectedAnswer(props.answer)}\r\n        />\r\n        <label className={`btn  answer\r\n            ${!props.answered ? \r\n                \"btn-outline-secondary\" \r\n                : props.selectedAnswer === props.correct_answer && props.selectedAnswer === props.answer ? \r\n                    \"btn-success\" \r\n                    : props.selectedAnswer === props.answer ? \r\n                        \"btn-danger\" \r\n                        : props.correct_answer === props.answer ? \r\n                            \"btn-primary\" \r\n                            : \"btn-outline-dark\"}        \r\n            `}        \r\n            htmlFor={`Answer${props.index}`}>\r\n            <h3>{props.answer}</h3>                   \r\n        </label>\r\n    </>\r\n \r\n\r\nexport default Answer;","import Answer from \"./Answer\";\r\n\r\n\r\nconst Question = props => \r\n    <div className=\"card\">\r\n        {console.log(\"Question:\", props.question)}\r\n        {console.log(\"Selected answer:\", props.selectedAnswer)}\r\n        <div class=\"card-header\">\r\n            <div className=\"question-header\">\r\n                <p className=\"card-subtitle\">Question #{props.position+1}</p>\r\n                <button className=\"btn btn-outline-dark\" onClick={() => props.reset()}>X</button>\r\n            </div>\r\n            \r\n        </div>\r\n        <div className=\"question card-body\">  \r\n        <h2 className=\"card-title text-center\">{props.question.question}</h2>\r\n            <div className=\"question-attributes\">\r\n                <span className=\"card-subtitle display-attribute\">Category: {props.question.category}</span>\r\n                <span className=\"card-subtitle display-attribute\">Difficulty: {props.question.difficulty}</span>\r\n            </div>\r\n            <div className=\"answers\">\r\n                {\r\n                    props.question.all_answers.map((answer, index) => \r\n                        <Answer key={index} index={index} answer={answer} correct_answer={props.question.correct_answer} selectedAnswer={props.selectedAnswer} setSelectedAnswer={props.setSelectedAnswer} answered={props.answered}/>\r\n                    )\r\n                }\r\n            </div>\r\n            {\r\n                props.selectedAnswer !== \"\" ?\r\n                    <div className=\"question-results\">\r\n                        {\r\n                            !props.answered ?\r\n                                <button className=\"btn btn-outline-primary btn-result\" onClick={props.validateAnswer}><span className=\"h4\">OK</span></button>\r\n                                :\r\n                                <>\r\n                                    {\r\n                                        props.question.correct_answer !== props.selectedAnswer ?\r\n                                            <>\r\n                                                <div className=\"question-result\"><h4>Your answer: {props.selectedAnswer}</h4></div>\r\n                                                <div className=\"question-result\"><h4>Correct answer: {props.question.correct_answer}</h4></div>\r\n                                            </>\r\n                                            :\r\n                                            <div className=\"question-result\"><h4>Correct!</h4></div>\r\n\r\n                                    }\r\n                                    \r\n                                    <button className=\"btn btn-outline-secondary btn-result\" onClick={() => {props.setPosition(props.position + 1); props.setAnswered(false);}}><h4>Next</h4></button>                                    \r\n                                </>                 \r\n                        }\r\n                    </div>\r\n                    :<></>\r\n            }\r\n        </div>\r\n     \r\n              \r\n    </div>\r\n\r\nexport default Question","export default {\r\n    categories : [\r\n        \"General Knowledge\",\r\n        \"Entertainment: Books\",\r\n        \"Entertainment: Film\",\r\n        \"Entertainment: Music\",\r\n        \"Entertainment: Musicals & Theatres\",\r\n        \"Entertainment: Television\",\r\n        \"Entertainment: Video Games\",\r\n        \"Entertainment: Board Games\",\r\n        \"Science & Nature\",\r\n        \"Science: Computers\",\r\n        \"Science: Mathematics\",\r\n        \"Mythology\",\r\n        \"Sports\",\r\n        \"Geography\",\r\n        \"History\",\r\n        \"Politics\",\r\n        \"Art\",\r\n        \"Celebrities\",\r\n        \"Animals\",\r\n        \"Vehicles\",\r\n        \"Entertainment: Comics\",\r\n        \"Science: Gadgets\",\r\n        \"Entertainment: Japanese Anime & Manga\",\r\n        \"Entertainment: Cartoon & Animations\"\r\n    ]\r\n}","import categories from '../data/categories'\r\n\r\nconst QuizConfig = props => \r\n    <div className=\"card\">\r\n        <div class=\"card-header\">\r\n            <h2>Configure Your Quiz</h2>\r\n        </div>\r\n        <div className=\"card-body config\">\r\n            <div className=\"config-inputs\">\r\n                <label className=\"form-label config-setting\">\r\n                    Number of questions:\r\n                    <input className=\"form-control\"\r\n                        type=\"number\" min=\"1\" max=\"50\" \r\n                        value={props.queryParams.num}\r\n                        onChange={e => props.setQueryParams(\r\n                            {\r\n                                ...props.queryParams,\r\n                                num: Math.floor(e.target.value)\r\n                            }\r\n                        )}\r\n                    />\r\n                </label>\r\n                <label className=\"form-label config-setting\">\r\n                    Difficulty:\r\n                    <select className=\"form-control\"\r\n                        value={props.queryParams.dif}\r\n                        onChange={e => props.setQueryParams(\r\n                            {\r\n                                ...props.queryParams,\r\n                                dif: e.target.value\r\n                            }\r\n                        )}\r\n                    >\r\n                        <option value=\"any\">Any Difficulty</option>\r\n                        <option value=\"easy\">Easy</option>\r\n                        <option value=\"medium\">Medium</option>\r\n                        <option value=\"hard\">Hard</option>\r\n                    </select>\r\n                </label>\r\n                <label className=\"form-label config-setting\">\r\n                    Category:\r\n                    <select className=\"form-control\"\r\n                        value={props.queryParams.cat}\r\n                        onChange={e => props.setQueryParams(\r\n                            {\r\n                                ...props.queryParams,\r\n                                cat: e.target.value\r\n                            }\r\n                        )}\r\n                    >\r\n                        <option value=\"any\">Any Category</option>\r\n                        {\r\n                            categories.categories.map((category, index) => \r\n                                <option key={index} value={index + 9}>\r\n                                    {category}\r\n                                </option>\r\n                            )\r\n                        }\r\n                    </select>\r\n                </label>\r\n            </div>\r\n            <button className=\"btn btn-success config-confirm\" \r\n                onClick={() => props.setStatus(props.STATUS.LOADING)}\r\n                disabled={props.queryParams.num < 1 || props.queryParams.num > 50}\r\n            >\r\n                <h2 className=\"big-button-text\">START</h2>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\nexport default QuizConfig","const Summary = props => \r\n    <div className=\"card\">\r\n        <div class=\"card-header question-header\">\r\n            <h2>Results</h2>\r\n            <button className=\"btn btn-outline-dark\" onClick={() => props.reset()}>X</button>\r\n        </div>\r\n        <div className=\"card-body summary\">\r\n            <h2 className=\"text-center\">You got {props.score.points} out of {props.score.correct_answers.length} questions correct</h2>\r\n            {/* <div className=\"summary-spacer\"/> */}\r\n            <ul className=\"results-list list-group\">\r\n            {\r\n                props.score.correct_answers.map((answer, index) => \r\n                    <li key={index} className={`list-group-item result ${answer ? \"border-success text-success\" : \"text-danger border-danger\"}`}>\r\n                        <h4>Question {index+1}:</h4>\r\n                        <h4>{answer ? \"Right\" : \"Wrong\"}</h4>\r\n                    </li>\r\n                )\r\n            }\r\n            </ul>\r\n            {/* <div className=\"summary-spacer\"/> */}\r\n            <div className=\"btn-group summary-buttons\" role=\"group\" aria-label=\"Buttons\">\r\n                <button className=\"btn btn-success summary-btn\" onClick={() => props.retakeQuiz()}><h4>Retake This Quiz</h4></button>\r\n                <button className=\"btn btn-primary summary-btn\" onClick={() => props.reset()}><h4>Take Another Quiz</h4></button>\r\n            </div>\r\n            <div className=\"btn-group-vertical summary-buttons-500\" role=\"group\" aria-label=\"Buttons\">\r\n                <button className=\"btn btn-success summary-btn\" onClick={() => props.retakeQuiz()}><h4>Retake This Quiz</h4></button>\r\n                <button className=\"btn btn-primary summary-btn\" onClick={() => props.reset()}><h4>Take Another Quiz</h4></button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\nexport default Summary;","import {useState, useEffect} from 'react';\r\n\r\nimport Loading from '../components/Loading.js';\r\nimport Error from '../components/Error.js';\r\nimport Question from '../components/Question.js';\r\nimport QuizConfig from '../components/QuizConfig.js';\r\nimport Summary from '../components/Summary.js';\r\nimport '../styles/App.css';\r\nimport '../styles/styles.css';\r\n\r\nconst URL = \"https://opentdb.com/api.php\";\r\n//const URL = \"https://opentb.com/api.php\";\r\n\r\nconst STATUS = {\r\n    START: \"start\",\r\n    LOADING: \"loading\",\r\n    SUCCESS: \"success\",\r\n    FAIL: \"fail\",\r\n    DONE: \"done\"\r\n}\r\n\r\nconst readQuestions = async (url) => {\r\n    {console.log(\"Requesting from: \", url)}\r\n    let response = await fetch(url);\r\n    let questions = await response.json();\r\n    return questions;\r\n}\r\n\r\nconst processAnswers = question => {\r\n    console.log(\"Process question:\", question);\r\n    let allAnswers = [];\r\n    question.incorrect_answers.map(answer => \r\n        allAnswers.push(decode(answer))\r\n    )\r\n    allAnswers.push(decode(question.correct_answer));    \r\n\r\n    let i, j, k;\r\n    for (i = 0; i < allAnswers.length; i++) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        k = allAnswers[i];\r\n        allAnswers[i] = allAnswers[j];\r\n        allAnswers[j] = k;\r\n    }\r\n\r\n    return allAnswers;\r\n}\r\n\r\nconst decode = txt => {\r\n    return new DOMParser().parseFromString(txt, 'text/html').body.innerText;\r\n}\r\n\r\nconst assembleURL = (queryParams) => {\r\n    let url = URL + \"?amount=\" + queryParams.num;\r\n    if (queryParams.cat !== \"any\") {\r\n        url = url + \"&category=\" + queryParams.cat;\r\n    }\r\n    if (queryParams.dif !== \"any\") {\r\n        url = url + \"&difficulty=\" + queryParams.dif; \r\n    }\r\n    return url;\r\n  }\r\n\r\nconst App = () => {\r\n    const [status, setStatus] = useState(STATUS.START);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [position, setPosition] = useState(0);\r\n    const [answered, setAnswered] = useState(false);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(\"\");\r\n    const [queryParams, setQueryParams] = useState({num: \"2\", cat: \"any\", dif: \"any\"});\r\n    const [score, setScore] = useState({points: 0, correct_answers: []});\r\n\r\n    useEffect(() => {\r\n        if (status === STATUS.LOADING) {\r\n            console.log(\"userEffect\")\r\n            let url = assembleURL(queryParams);\r\n            readQuestions(url).then(data => {\r\n                console.log(\"data:\", data);\r\n                data.results.map((result, index)=> {\r\n                    result.all_answers = processAnswers(result);\r\n                    result.question = decode(result.question);\r\n                })\r\n                console.log(\"Post set-questions:\", data.results);\r\n                setQuestions(data.results);\r\n                setStatus(STATUS.SUCCESS);             \r\n            }).catch(error => {\r\n                setStatus(STATUS.FAIL);\r\n                console.log(error);\r\n            })\r\n        }        \r\n    }, [status, queryParams]);\r\n\r\n    const validateAnswer = () => {\r\n        setAnswered(true);\r\n        let points = score.points;\r\n        let answers = [];\r\n        score.correct_answers.map((answer, index) => {\r\n            answers.push(answer);\r\n        });        \r\n        if (selectedAnswer === questions[position].correct_answer) {\r\n            console.log(\"Right!\");\r\n            points++;\r\n            answers.push(true);\r\n            setScore({\r\n                ...score,\r\n                points: points,\r\n                correct_answers: answers\r\n            });\r\n        } else {\r\n            console.log(\"Wrong!\");\r\n            answers.push(false);\r\n            setScore({\r\n                ...score,\r\n                correct_answers: answers\r\n            });\r\n        }     \r\n    }\r\n\r\n    const retakeQuiz = () => {\r\n        setScore({points: 0, correct_answers: []});\r\n        setPosition(0);\r\n        setStatus(STATUS.SUCCESS);\r\n    }\r\n\r\n    const reset = () => {\r\n        setScore({points: 0, correct_answers: []});\r\n        setPosition(0);\r\n        setStatus(STATUS.START);\r\n    }\r\n\r\n\r\n    return (\r\n        <main className=\"container\">\r\n                {console.log(\"Current Status:\", status)}\r\n                {console.log(\"Container:\", questions)}\r\n                {console.log(\"Score is now: \", score)}\r\n                {\r\n                    status === STATUS.START ?\r\n                        <QuizConfig \r\n                            STATUS={STATUS} setStatus={setStatus}\r\n                            queryParams={queryParams} setQueryParams={setQueryParams}\r\n                        />\r\n                        :\r\n                        <>\r\n                            {\r\n                                status === STATUS.LOADING ?\r\n                                    <Loading />\r\n                                    :\r\n                                    <>\r\n                                        {\r\n                                            status === STATUS.SUCCESS ?\r\n                                                <>{\r\n                                                    position < questions.length ?\r\n                                                        <Question\r\n                                                            question={questions[position]}\r\n                                                            position={position} setPosition={setPosition}\r\n                                                            selectedAnswer={selectedAnswer} setSelectedAnswer={setSelectedAnswer}\r\n                                                            answered={answered} setAnswered={setAnswered}\r\n                                                            validateAnswer={validateAnswer}\r\n                                                            reset={reset}\r\n                                                        />\r\n                                                        :\r\n                                                        <Summary score={score} reset={reset} retakeQuiz={retakeQuiz}/>\r\n                                                }</>                                               \r\n                                                :\r\n                                                <Error reset={reset}/>\r\n                                        }\r\n                                    </>\r\n                            }\r\n                        </>\r\n                }\r\n               \r\n        </main>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport bootstrap from 'bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './styles/index.css';\r\nimport App from './views/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}